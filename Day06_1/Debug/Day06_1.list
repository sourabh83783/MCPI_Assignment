
Day06_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080010a0  080010a0  000020a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010ec  080010ec  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  080010ec  080010ec  000020ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010f4  080010f4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010f4  080010f4  000020f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010f8  080010f8  000020f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080010fc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003054  2**0
                  CONTENTS
 10 .bss          0000016c  20000054  20000054  00003054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c0  200001c0  00003054  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000231b  00000000  00000000  0000307e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000096c  00000000  00000000  00005399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000065a  00000000  00000000  00005d05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000150  00000000  00000000  00006360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000248  00000000  00000000  000064b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000186ba  00000000  00000000  000066f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000025d1  00000000  00000000  0001edb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008c3fa  00000000  00000000  00021383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  000ad77d  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00000778  00000000  00000000  000ad7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000005d  00000000  00000000  000adf38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000054 	.word	0x20000054
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001088 	.word	0x08001088

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000058 	.word	0x20000058
 80001cc:	08001088 	.word	0x08001088

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <LcdWrite.constprop.1>:
}

void LcdWriteNibble(uint8_t rs, uint8_t val) {

	if(rs == LCD_CMD)
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 8000270:	4b28      	ldr	r3, [pc, #160]	@ (8000314 <LcdWrite.constprop.1+0xa4>)
 8000272:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
	DelayMs(1);
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
}

void LcdWrite(uint8_t rs, uint8_t val) {
 8000276:	b410      	push	{r4}
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 8000278:	619a      	str	r2, [r3, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800027a:	695a      	ldr	r2, [r3, #20]
#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
	uint32_t init_ticks = DWT->CYCCNT;
	uint32_t ticks = (SystemCoreClock / 1000);
 800027c:	4c26      	ldr	r4, [pc, #152]	@ (8000318 <LcdWrite.constprop.1+0xa8>)
 800027e:	f022 020f 	bic.w	r2, r2, #15
 8000282:	615a      	str	r2, [r3, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 8000284:	695a      	ldr	r2, [r3, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 8000286:	2180      	movs	r1, #128	@ 0x80
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 8000288:	ea42 1210 	orr.w	r2, r2, r0, lsr #4
 800028c:	615a      	str	r2, [r3, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 800028e:	6199      	str	r1, [r3, #24]
 8000290:	6822      	ldr	r2, [r4, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 8000292:	4922      	ldr	r1, [pc, #136]	@ (800031c <LcdWrite.constprop.1+0xac>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000294:	4b22      	ldr	r3, [pc, #136]	@ (8000320 <LcdWrite.constprop.1+0xb0>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000296:	684c      	ldr	r4, [r1, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000298:	fba3 3202 	umull	r3, r2, r3, r2
	uint8_t high = val >> 4, low = val & 0x0F;
 800029c:	f000 000f 	and.w	r0, r0, #15
 80002a0:	0992      	lsrs	r2, r2, #6
	ms *= ticks;
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002a2:	684b      	ldr	r3, [r1, #4]
 80002a4:	1b1b      	subs	r3, r3, r4
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d3fb      	bcc.n	80002a2 <LcdWrite.constprop.1+0x32>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000314 <LcdWrite.constprop.1+0xa4>)
 80002ac:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
 80002b0:	619c      	str	r4, [r3, #24]
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW_CLR);
 80002b2:	f44f 04c0 	mov.w	r4, #6291456	@ 0x600000
 80002b6:	619c      	str	r4, [r3, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 80002b8:	695c      	ldr	r4, [r3, #20]
 80002ba:	f024 040f 	bic.w	r4, r4, #15
 80002be:	615c      	str	r4, [r3, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 80002c0:	695c      	ldr	r4, [r3, #20]
 80002c2:	4320      	orrs	r0, r4
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002c4:	2480      	movs	r4, #128	@ 0x80
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 80002c6:	6158      	str	r0, [r3, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 80002c8:	619c      	str	r4, [r3, #24]
	uint32_t init_ticks = DWT->CYCCNT;
 80002ca:	6848      	ldr	r0, [r1, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80002cc:	4913      	ldr	r1, [pc, #76]	@ (800031c <LcdWrite.constprop.1+0xac>)
 80002ce:	684b      	ldr	r3, [r1, #4]
 80002d0:	1a1b      	subs	r3, r3, r0
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d3fb      	bcc.n	80002ce <LcdWrite.constprop.1+0x5e>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002d6:	490f      	ldr	r1, [pc, #60]	@ (8000314 <LcdWrite.constprop.1+0xa4>)
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 80002d8:	4812      	ldr	r0, [pc, #72]	@ (8000324 <LcdWrite.constprop.1+0xb4>)
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 80002da:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80002de:	618b      	str	r3, [r1, #24]
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 80002e0:	680b      	ldr	r3, [r1, #0]
 80002e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002e6:	600b      	str	r3, [r1, #0]
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 80002e8:	6188      	str	r0, [r1, #24]
		state = LCD_DATA_GPIO->IDR;
 80002ea:	690b      	ldr	r3, [r1, #16]
	} while((state & BV(LCD_BF)) != 0);
 80002ec:	071b      	lsls	r3, r3, #28
 80002ee:	d4fc      	bmi.n	80002ea <LcdWrite.constprop.1+0x7a>
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 80002f0:	f44f 0340 	mov.w	r3, #12582912	@ 0xc00000
 80002f4:	618b      	str	r3, [r1, #24]
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 80002f6:	680b      	ldr	r3, [r1, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 80002f8:	4808      	ldr	r0, [pc, #32]	@ (800031c <LcdWrite.constprop.1+0xac>)
 80002fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002fe:	600b      	str	r3, [r1, #0]
 8000300:	6844      	ldr	r4, [r0, #4]
 8000302:	2103      	movs	r1, #3
	ms *= ticks;
 8000304:	fb02 f101 	mul.w	r1, r2, r1
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000308:	6843      	ldr	r3, [r0, #4]
 800030a:	1b1b      	subs	r3, r3, r4
 800030c:	428b      	cmp	r3, r1
 800030e:	d3fb      	bcc.n	8000308 <LcdWrite.constprop.1+0x98>

	LcdWriteNibble(rs, low);

	LcdBusyWait();
	DelayMs(3);
}
 8000310:	bc10      	pop	{r4}
 8000312:	4770      	bx	lr
 8000314:	40020c00 	.word	0x40020c00
 8000318:	20000000 	.word	0x20000000
 800031c:	e0001000 	.word	0xe0001000
 8000320:	10624dd3 	.word	0x10624dd3
 8000324:	002000c0 	.word	0x002000c0

08000328 <LcdInit>:

void LcdInit(void) {
 8000328:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks = (SystemCoreClock / 1000);
 800032a:	4d36      	ldr	r5, [pc, #216]	@ (8000404 <LcdInit+0xdc>)
 800032c:	4a36      	ldr	r2, [pc, #216]	@ (8000408 <LcdInit+0xe0>)
 800032e:	682b      	ldr	r3, [r5, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 8000330:	4936      	ldr	r1, [pc, #216]	@ (800040c <LcdInit+0xe4>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000332:	fba2 2303 	umull	r2, r3, r2, r3
 8000336:	ea4f 1c93 	mov.w	ip, r3, lsr #6
 800033a:	2232      	movs	r2, #50	@ 0x32
	uint32_t init_ticks = DWT->CYCCNT;
 800033c:	6848      	ldr	r0, [r1, #4]
	ms *= ticks;
 800033e:	fb02 f20c 	mul.w	r2, r2, ip
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000342:	684b      	ldr	r3, [r1, #4]
 8000344:	1a1b      	subs	r3, r3, r0
 8000346:	4293      	cmp	r3, r2
 8000348:	d3fb      	bcc.n	8000342 <LcdInit+0x1a>
	DelayMs(50);

	RCC->AHB1ENR |= BV(LCD_DATA_GPIO_EN);
 800034a:	4b31      	ldr	r3, [pc, #196]	@ (8000410 <LcdInit+0xe8>)
 800034c:	4c2f      	ldr	r4, [pc, #188]	@ (800040c <LcdInit+0xe4>)
 800034e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000350:	f042 0208 	orr.w	r2, r2, #8
 8000354:	631a      	str	r2, [r3, #48]	@ 0x30
	RCC->AHB1ENR |= BV(LCD_CTRL_GPIO_EN);
 8000356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000358:	f042 0208 	orr.w	r2, r2, #8
 800035c:	631a      	str	r2, [r3, #48]	@ 0x30


	LCD_DATA_GPIO->MODER &= ~(BV(LCD_D7*2+1) | BV(LCD_D6*2+1) | BV(LCD_D5*2+1) | BV(LCD_D4*2+1));
 800035e:	f5a3 5330 	sub.w	r3, r3, #11264	@ 0x2c00
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	f022 02aa 	bic.w	r2, r2, #170	@ 0xaa
 8000368:	601a      	str	r2, [r3, #0]
	LCD_DATA_GPIO->MODER |= BV(LCD_D7*2) | BV(LCD_D6*2) | BV(LCD_D5*2) | BV(LCD_D4*2);
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	f042 0255 	orr.w	r2, r2, #85	@ 0x55
 8000370:	601a      	str	r2, [r3, #0]
	LCD_DATA_GPIO->OSPEEDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 8000372:	689a      	ldr	r2, [r3, #8]
 8000374:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000378:	609a      	str	r2, [r3, #8]
	LCD_DATA_GPIO->PUPDR &= ~(BV(LCD_D7*2+1) | BV(LCD_D7*2) | BV(LCD_D6*2+1) | BV(LCD_D6*2) | BV(LCD_D5*2+1) | BV(LCD_D5*2) | BV(LCD_D4*2+1) | BV(LCD_D4*2));
 800037a:	68da      	ldr	r2, [r3, #12]
 800037c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000380:	60da      	str	r2, [r3, #12]
	LCD_DATA_GPIO->OTYPER &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000382:	685a      	ldr	r2, [r3, #4]
 8000384:	f022 020f 	bic.w	r2, r2, #15
 8000388:	605a      	str	r2, [r3, #4]

	LCD_DATA_GPIO->BSRR = (BV(LCD_D7_CLR) | BV(LCD_D6_CLR) | BV(LCD_D5_CLR) | BV(LCD_D4_CLR));
 800038a:	f44f 2270 	mov.w	r2, #983040	@ 0xf0000
 800038e:	619a      	str	r2, [r3, #24]

	LCD_CTRL_GPIO->MODER &= ~(BV(LCD_RS*2+1) | BV(LCD_RW*2+1) | BV(LCD_EN*2+1));
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	f422 4228 	bic.w	r2, r2, #43008	@ 0xa800
 8000396:	601a      	str	r2, [r3, #0]
	LCD_CTRL_GPIO->MODER |= BV(LCD_RS*2) | BV(LCD_RW*2) | BV(LCD_EN*2);
 8000398:	681a      	ldr	r2, [r3, #0]
 800039a:	f442 42a8 	orr.w	r2, r2, #21504	@ 0x5400
 800039e:	601a      	str	r2, [r3, #0]
	LCD_CTRL_GPIO->OSPEEDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003a0:	689a      	ldr	r2, [r3, #8]
 80003a2:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
 80003a6:	609a      	str	r2, [r3, #8]
	LCD_CTRL_GPIO->PUPDR &= ~(BV(LCD_RS*2+1) | BV(LCD_RS*2) | BV(LCD_RW*2+1) | BV(LCD_RW*2) | BV(LCD_EN*2+1) | BV(LCD_EN*2));
 80003a8:	68da      	ldr	r2, [r3, #12]
 80003aa:	f422 427c 	bic.w	r2, r2, #64512	@ 0xfc00
 80003ae:	60da      	str	r2, [r3, #12]
	LCD_CTRL_GPIO->OTYPER &= ~(BV(LCD_RS) | BV(LCD_RW) | BV(LCD_EN));
 80003b0:	685a      	ldr	r2, [r3, #4]
 80003b2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80003b6:	605a      	str	r2, [r3, #4]


	LCD_CTRL_GPIO->BSRR = (BV(LCD_RS_CLR) | BV(LCD_RW_CLR) | BV(LCD_EN_CLR));
 80003b8:	f44f 0260 	mov.w	r2, #14680064	@ 0xe00000
 80003bc:	619a      	str	r2, [r3, #24]
	uint32_t init_ticks = DWT->CYCCNT;
 80003be:	6849      	ldr	r1, [r1, #4]
 80003c0:	22c8      	movs	r2, #200	@ 0xc8
	ms *= ticks;
 80003c2:	fb0c f202 	mul.w	r2, ip, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003c6:	6863      	ldr	r3, [r4, #4]
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d3fb      	bcc.n	80003c6 <LcdInit+0x9e>

	DelayMs(200);

	LcdWrite(LCD_CMD, LCD_FN_SET);
 80003ce:	2028      	movs	r0, #40	@ 0x28
 80003d0:	f7ff ff4e 	bl	8000270 <LcdWrite.constprop.1>

	LcdWrite(LCD_CMD, LCD_DISP_ON);
 80003d4:	200f      	movs	r0, #15
 80003d6:	f7ff ff4b 	bl	8000270 <LcdWrite.constprop.1>

	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80003da:	2006      	movs	r0, #6
 80003dc:	f7ff ff48 	bl	8000270 <LcdWrite.constprop.1>

	LcdWrite(LCD_CMD, LCD_CLEAR);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff ff45 	bl	8000270 <LcdWrite.constprop.1>
	uint32_t ticks = (SystemCoreClock / 1000);
 80003e6:	4908      	ldr	r1, [pc, #32]	@ (8000408 <LcdInit+0xe0>)
 80003e8:	682b      	ldr	r3, [r5, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 80003ea:	6860      	ldr	r0, [r4, #4]
	uint32_t ticks = (SystemCoreClock / 1000);
 80003ec:	fba1 1303 	umull	r1, r3, r1, r3
 80003f0:	22c8      	movs	r2, #200	@ 0xc8
 80003f2:	099b      	lsrs	r3, r3, #6
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003f4:	4905      	ldr	r1, [pc, #20]	@ (800040c <LcdInit+0xe4>)
	ms *= ticks;
 80003f6:	fb03 f202 	mul.w	r2, r3, r2
	while ((DWT->CYCCNT - init_ticks) < ms);
 80003fa:	684b      	ldr	r3, [r1, #4]
 80003fc:	1a1b      	subs	r3, r3, r0
 80003fe:	4293      	cmp	r3, r2
 8000400:	d3fb      	bcc.n	80003fa <LcdInit+0xd2>

	DelayMs(200);
}
 8000402:	bd38      	pop	{r3, r4, r5, pc}
 8000404:	20000000 	.word	0x20000000
 8000408:	10624dd3 	.word	0x10624dd3
 800040c:	e0001000 	.word	0xe0001000
 8000410:	40023800 	.word	0x40023800

08000414 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 8000414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000418:	460c      	mov	r4, r1
	int i;

	LcdWrite(LCD_CMD, line);
 800041a:	f7ff ff29 	bl	8000270 <LcdWrite.constprop.1>

	for(i=0; str[i]!='\0'; i++)
 800041e:	7823      	ldrb	r3, [r4, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d057      	beq.n	80004d4 <LcdPuts+0xc0>
	uint32_t ticks = (SystemCoreClock / 1000);
 8000424:	4a2c      	ldr	r2, [pc, #176]	@ (80004d8 <LcdPuts+0xc4>)
 8000426:	492d      	ldr	r1, [pc, #180]	@ (80004dc <LcdPuts+0xc8>)
 8000428:	6812      	ldr	r2, [r2, #0]
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 800042a:	482d      	ldr	r0, [pc, #180]	@ (80004e0 <LcdPuts+0xcc>)
 800042c:	4e2d      	ldr	r6, [pc, #180]	@ (80004e4 <LcdPuts+0xd0>)
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 800042e:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 80004e8 <LcdPuts+0xd4>
 8000432:	fba1 1c02 	umull	r1, ip, r1, r2
	uint32_t init_ticks = DWT->CYCCNT;
 8000436:	4a2d      	ldr	r2, [pc, #180]	@ (80004ec <LcdPuts+0xd8>)
 8000438:	4621      	mov	r1, r4
	uint32_t ticks = (SystemCoreClock / 1000);
 800043a:	ea4f 1c9c 	mov.w	ip, ip, lsr #6
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 800043e:	2580      	movs	r5, #128	@ 0x80
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 8000440:	f44f 0400 	mov.w	r4, #8388608	@ 0x800000
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 8000444:	f44f 0740 	mov.w	r7, #12582912	@ 0xc00000
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 8000448:	6186      	str	r6, [r0, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 800044a:	f8d0 8014 	ldr.w	r8, [r0, #20]
 800044e:	f028 080f 	bic.w	r8, r8, #15
 8000452:	f8c0 8014 	str.w	r8, [r0, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 8000456:	f8d0 8014 	ldr.w	r8, [r0, #20]
	uint8_t high = val >> 4, low = val & 0x0F;
 800045a:	f003 090f 	and.w	r9, r3, #15
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 800045e:	ea48 1313 	orr.w	r3, r8, r3, lsr #4
 8000462:	6143      	str	r3, [r0, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 8000464:	6185      	str	r5, [r0, #24]
	uint32_t init_ticks = DWT->CYCCNT;
 8000466:	f8d2 8004 	ldr.w	r8, [r2, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800046a:	6853      	ldr	r3, [r2, #4]
 800046c:	eba3 0308 	sub.w	r3, r3, r8
 8000470:	4563      	cmp	r3, ip
 8000472:	d3fa      	bcc.n	800046a <LcdPuts+0x56>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 8000474:	6184      	str	r4, [r0, #24]
		LCD_CTRL_GPIO->BSRR = BV(LCD_RS) | BV(LCD_RW_CLR);
 8000476:	6186      	str	r6, [r0, #24]
	LCD_DATA_GPIO->ODR &= ~(BV(LCD_D7) | BV(LCD_D6) | BV(LCD_D5) | BV(LCD_D4));
 8000478:	6943      	ldr	r3, [r0, #20]
 800047a:	f023 030f 	bic.w	r3, r3, #15
 800047e:	6143      	str	r3, [r0, #20]
	LCD_DATA_GPIO->ODR |= val << LCD_D4;
 8000480:	6943      	ldr	r3, [r0, #20]
 8000482:	ea49 0303 	orr.w	r3, r9, r3
 8000486:	6143      	str	r3, [r0, #20]
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN);
 8000488:	6185      	str	r5, [r0, #24]
	uint32_t init_ticks = DWT->CYCCNT;
 800048a:	f8d2 8004 	ldr.w	r8, [r2, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800048e:	6853      	ldr	r3, [r2, #4]
 8000490:	eba3 0308 	sub.w	r3, r3, r8
 8000494:	4563      	cmp	r3, ip
 8000496:	d3fa      	bcc.n	800048e <LcdPuts+0x7a>
	LCD_CTRL_GPIO->BSRR = BV(LCD_EN_CLR);
 8000498:	6184      	str	r4, [r0, #24]
	LCD_DATA_GPIO->MODER &= ~(BV(LCD_BF*2)|BV(LCD_BF*2+1));
 800049a:	6803      	ldr	r3, [r0, #0]
 800049c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80004a0:	6003      	str	r3, [r0, #0]
	LCD_CTRL_GPIO->BSRR = BV(LCD_RS_CLR) | BV(LCD_RW) | BV(LCD_EN);
 80004a2:	f8c0 e018 	str.w	lr, [r0, #24]
		state = LCD_DATA_GPIO->IDR;
 80004a6:	6903      	ldr	r3, [r0, #16]
	} while((state & BV(LCD_BF)) != 0);
 80004a8:	071b      	lsls	r3, r3, #28
 80004aa:	d4fc      	bmi.n	80004a6 <LcdPuts+0x92>
	LCD_CTRL_GPIO->BSRR = BV(LCD_RW_CLR) | BV(LCD_EN_CLR);
 80004ac:	6187      	str	r7, [r0, #24]
	LCD_DATA_GPIO->MODER |= BV(LCD_BF*2);
 80004ae:	6803      	ldr	r3, [r0, #0]
 80004b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004b4:	6003      	str	r3, [r0, #0]
	uint32_t init_ticks = DWT->CYCCNT;
 80004b6:	f04f 0803 	mov.w	r8, #3
 80004ba:	f8d2 9004 	ldr.w	r9, [r2, #4]
	ms *= ticks;
 80004be:	fb0c f808 	mul.w	r8, ip, r8
	while ((DWT->CYCCNT - init_ticks) < ms);
 80004c2:	6853      	ldr	r3, [r2, #4]
 80004c4:	eba3 0309 	sub.w	r3, r3, r9
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d3fa      	bcc.n	80004c2 <LcdPuts+0xae>
	for(i=0; str[i]!='\0'; i++)
 80004cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d1b9      	bne.n	8000448 <LcdPuts+0x34>
		LcdWrite(LCD_DATA, str[i]);
}
 80004d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80004d8:	20000000 	.word	0x20000000
 80004dc:	10624dd3 	.word	0x10624dd3
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	00400020 	.word	0x00400020
 80004e8:	002000c0 	.word	0x002000c0
 80004ec:	e0001000 	.word	0xe0001000

080004f0 <LedInit>:
#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {

	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80004f0:	4913      	ldr	r1, [pc, #76]	@ (8000540 <LedInit+0x50>)

	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80004f2:	4b14      	ldr	r3, [pc, #80]	@ (8000544 <LedInit+0x54>)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80004f4:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80004f6:	f042 0208 	orr.w	r2, r2, #8
void LedInit(uint32_t pin) {
 80004fa:	b410      	push	{r4}
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 80004fc:	630a      	str	r2, [r1, #48]	@ 0x30
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 80004fe:	0041      	lsls	r1, r0, #1
 8000500:	681c      	ldr	r4, [r3, #0]
 8000502:	f04f 0c01 	mov.w	ip, #1
 8000506:	1c4a      	adds	r2, r1, #1
 8000508:	fa0c f202 	lsl.w	r2, ip, r2
 800050c:	ea24 0402 	bic.w	r4, r4, r2
 8000510:	601c      	str	r4, [r3, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 8000512:	fa0c f101 	lsl.w	r1, ip, r1

	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));

	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));

	LED_GPIO->OTYPER &= ~BV(pin);
 8000516:	fa0c fc00 	lsl.w	ip, ip, r0
	LED_GPIO->MODER |= BV(pin * 2);
 800051a:	6818      	ldr	r0, [r3, #0]
}
 800051c:	bc10      	pop	{r4}
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800051e:	430a      	orrs	r2, r1
	LED_GPIO->MODER |= BV(pin * 2);
 8000520:	4301      	orrs	r1, r0
 8000522:	6019      	str	r1, [r3, #0]
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000524:	6899      	ldr	r1, [r3, #8]
 8000526:	ea21 0102 	bic.w	r1, r1, r2
 800052a:	6099      	str	r1, [r3, #8]
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800052c:	68d9      	ldr	r1, [r3, #12]
 800052e:	ea21 0202 	bic.w	r2, r1, r2
 8000532:	60da      	str	r2, [r3, #12]
	LED_GPIO->OTYPER &= ~BV(pin);
 8000534:	685a      	ldr	r2, [r3, #4]
 8000536:	ea22 020c 	bic.w	r2, r2, ip
 800053a:	605a      	str	r2, [r3, #4]
}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800
 8000544:	40020c00 	.word	0x40020c00

08000548 <LedBlink>:

void LedOn(uint32_t pin) {

	LED_GPIO->ODR |= BV(pin);
 8000548:	4a0f      	ldr	r2, [pc, #60]	@ (8000588 <LedBlink+0x40>)
 800054a:	f04f 0c01 	mov.w	ip, #1
 800054e:	6953      	ldr	r3, [r2, #20]
 8000550:	fa0c fc00 	lsl.w	ip, ip, r0
 8000554:	ea4c 0303 	orr.w	r3, ip, r3
	uint32_t ticks = (SystemCoreClock / 1000);
 8000558:	480c      	ldr	r0, [pc, #48]	@ (800058c <LedBlink+0x44>)
void LedOff(uint32_t pin) {

	LED_GPIO->ODR &= ~BV(pin);
}

void LedBlink(uint32_t pin, uint32_t delay) {
 800055a:	b410      	push	{r4}
	LED_GPIO->ODR |= BV(pin);
 800055c:	6153      	str	r3, [r2, #20]
 800055e:	6803      	ldr	r3, [r0, #0]
 8000560:	4c0b      	ldr	r4, [pc, #44]	@ (8000590 <LedBlink+0x48>)
	uint32_t init_ticks = DWT->CYCCNT;
 8000562:	4a0c      	ldr	r2, [pc, #48]	@ (8000594 <LedBlink+0x4c>)
	uint32_t ticks = (SystemCoreClock / 1000);
 8000564:	fba4 4303 	umull	r4, r3, r4, r3
 8000568:	099b      	lsrs	r3, r3, #6
	uint32_t init_ticks = DWT->CYCCNT;
 800056a:	6850      	ldr	r0, [r2, #4]
	ms *= ticks;
 800056c:	fb03 f101 	mul.w	r1, r3, r1
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000570:	6853      	ldr	r3, [r2, #4]
 8000572:	1a1b      	subs	r3, r3, r0
 8000574:	428b      	cmp	r3, r1
 8000576:	d3fb      	bcc.n	8000570 <LedBlink+0x28>
	LED_GPIO->ODR &= ~BV(pin);
 8000578:	4a03      	ldr	r2, [pc, #12]	@ (8000588 <LedBlink+0x40>)
	LedOn(pin);
	DelayMs(delay);
	LedOff(pin);
}
 800057a:	bc10      	pop	{r4}
	LED_GPIO->ODR &= ~BV(pin);
 800057c:	6953      	ldr	r3, [r2, #20]
 800057e:	ea23 030c 	bic.w	r3, r3, ip
 8000582:	6153      	str	r3, [r2, #20]
}
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop
 8000588:	40020c00 	.word	0x40020c00
 800058c:	20000000 	.word	0x20000000
 8000590:	10624dd3 	.word	0x10624dd3
 8000594:	e0001000 	.word	0xe0001000

08000598 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059a:	b089      	sub	sp, #36	@ 0x24
	SystemInit();
 800059c:	f000 f890 	bl	80006c0 <SystemInit>
	LedInit(LED_ORANGE);
 80005a0:	200d      	movs	r0, #13
 80005a2:	f7ff ffa5 	bl	80004f0 <LedInit>
	SwitchInit(SWITCH);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f000 f826 	bl	80005f8 <SwitchInit>

	int counter = 0;
 80005ac:	4c0f      	ldr	r4, [pc, #60]	@ (80005ec <main+0x54>)
			;

		LedBlink(LED_ORANGE, 500);
		LcdInit();
		counter++;
			sprintf(str, "CNT=%d", counter);
 80005ae:	4f10      	ldr	r7, [pc, #64]	@ (80005f0 <main+0x58>)
			LcdPuts(LCD_LINE1,"Assignment04 ");
 80005b0:	4e10      	ldr	r6, [pc, #64]	@ (80005f4 <main+0x5c>)
	int counter = 0;
 80005b2:	2500      	movs	r5, #0
		while(exti0_flag == 0)
 80005b4:	6823      	ldr	r3, [r4, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0fc      	beq.n	80005b4 <main+0x1c>
		LedBlink(LED_ORANGE, 500);
 80005ba:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80005be:	200d      	movs	r0, #13
		counter++;
 80005c0:	3501      	adds	r5, #1
		LedBlink(LED_ORANGE, 500);
 80005c2:	f7ff ffc1 	bl	8000548 <LedBlink>
		LcdInit();
 80005c6:	f7ff feaf 	bl	8000328 <LcdInit>
			sprintf(str, "CNT=%d", counter);
 80005ca:	462a      	mov	r2, r5
 80005cc:	4639      	mov	r1, r7
 80005ce:	4668      	mov	r0, sp
 80005d0:	f000 f8c2 	bl	8000758 <siprintf>
			LcdPuts(LCD_LINE1,"Assignment04 ");
 80005d4:	4631      	mov	r1, r6
 80005d6:	2080      	movs	r0, #128	@ 0x80
 80005d8:	f7ff ff1c 	bl	8000414 <LcdPuts>
			LcdPuts(LCD_LINE2, str);
 80005dc:	4669      	mov	r1, sp
 80005de:	20c0      	movs	r0, #192	@ 0xc0
 80005e0:	f7ff ff18 	bl	8000414 <LcdPuts>

			exti0_flag = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	6023      	str	r3, [r4, #0]
		while(exti0_flag == 0)
 80005e8:	e7e4      	b.n	80005b4 <main+0x1c>
 80005ea:	bf00      	nop
 80005ec:	20000070 	.word	0x20000070
 80005f0:	080010a0 	.word	0x080010a0
 80005f4:	080010a8 	.word	0x080010a8

080005f8 <SwitchInit>:

#include "switch.h"

void SwitchInit(uint32_t pin) {

	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80005f8:	4916      	ldr	r1, [pc, #88]	@ (8000654 <SwitchInit+0x5c>)

	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80005fa:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <SwitchInit+0x60>)
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 80005fc:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80005fe:	f043 0301 	orr.w	r3, r3, #1
void SwitchInit(uint32_t pin) {
 8000602:	b410      	push	{r4}
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000604:	0040      	lsls	r0, r0, #1
	RCC->AHB1ENR |= BV(SWITCH_GPIO_EN);
 8000606:	630b      	str	r3, [r1, #48]	@ 0x30
	SWITCH_GPIO->MODER &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000608:	2101      	movs	r1, #1
 800060a:	1843      	adds	r3, r0, r1
 800060c:	6814      	ldr	r4, [r2, #0]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4081      	lsls	r1, r0
 8000614:	430b      	orrs	r3, r1
 8000616:	ea24 0403 	bic.w	r4, r4, r3
 800061a:	6014      	str	r4, [r2, #0]

	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 800061c:	6890      	ldr	r0, [r2, #8]

	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));

	EXTI->FTSR |= BV(SWITCH);
 800061e:	490f      	ldr	r1, [pc, #60]	@ (800065c <SwitchInit+0x64>)
	EXTI->IMR |= BV(SWITCH);

	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));

	NVIC_EnableIRQ(EXTI0_IRQn);
}
 8000620:	bc10      	pop	{r4}
	SWITCH_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000622:	ea20 0003 	bic.w	r0, r0, r3
 8000626:	6090      	str	r0, [r2, #8]
	SWITCH_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000628:	68d0      	ldr	r0, [r2, #12]
 800062a:	ea20 0303 	bic.w	r3, r0, r3
 800062e:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= BV(SWITCH);
 8000630:	68cb      	ldr	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	480b      	ldr	r0, [pc, #44]	@ (8000660 <SwitchInit+0x68>)
 8000634:	f043 0301 	orr.w	r3, r3, #1
 8000638:	60cb      	str	r3, [r1, #12]
	EXTI->IMR |= BV(SWITCH);
 800063a:	680b      	ldr	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 800063c:	f5a2 4248 	sub.w	r2, r2, #51200	@ 0xc800
	EXTI->IMR |= BV(SWITCH);
 8000640:	f043 0301 	orr.w	r3, r3, #1
 8000644:	600b      	str	r3, [r1, #0]
	SYSCFG->EXTICR[0] &= ~(BV(3) | BV(2) | BV(1) | BV(0));
 8000646:	6893      	ldr	r3, [r2, #8]
 8000648:	2140      	movs	r1, #64	@ 0x40
 800064a:	f023 030f 	bic.w	r3, r3, #15
 800064e:	6093      	str	r3, [r2, #8]
 8000650:	6001      	str	r1, [r0, #0]
}
 8000652:	4770      	bx	lr
 8000654:	40023800 	.word	0x40023800
 8000658:	40020000 	.word	0x40020000
 800065c:	40013c00 	.word	0x40013c00
 8000660:	e000e100 	.word	0xe000e100

08000664 <EXTI0_IRQHandler>:

volatile int exti0_flag = 0;

void EXTI0_IRQHandler(void) {

	EXTI->PR |= BV(SWITCH);
 8000664:	4a03      	ldr	r2, [pc, #12]	@ (8000674 <EXTI0_IRQHandler+0x10>)

	exti0_flag = 1;
 8000666:	4904      	ldr	r1, [pc, #16]	@ (8000678 <EXTI0_IRQHandler+0x14>)
	EXTI->PR |= BV(SWITCH);
 8000668:	6953      	ldr	r3, [r2, #20]
	exti0_flag = 1;
 800066a:	2001      	movs	r0, #1
	EXTI->PR |= BV(SWITCH);
 800066c:	4303      	orrs	r3, r0
 800066e:	6153      	str	r3, [r2, #20]
	exti0_flag = 1;
 8000670:	6008      	str	r0, [r1, #0]
}
 8000672:	4770      	bx	lr
 8000674:	40013c00 	.word	0x40013c00
 8000678:	20000070 	.word	0x20000070

0800067c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800067c:	490c      	ldr	r1, [pc, #48]	@ (80006b0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067e:	4a0d      	ldr	r2, [pc, #52]	@ (80006b4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8000680:	680b      	ldr	r3, [r1, #0]
{
 8000682:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000684:	4c0c      	ldr	r4, [pc, #48]	@ (80006b8 <_sbrk+0x3c>)
 8000686:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8000688:	b12b      	cbz	r3, 8000696 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068a:	4418      	add	r0, r3
 800068c:	4290      	cmp	r0, r2
 800068e:	d807      	bhi.n	80006a0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000690:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8000692:	4618      	mov	r0, r3
 8000694:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <_sbrk+0x40>)
 8000698:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800069a:	4418      	add	r0, r3
 800069c:	4290      	cmp	r0, r2
 800069e:	d9f7      	bls.n	8000690 <_sbrk+0x14>
    errno = ENOMEM;
 80006a0:	f000 f87a 	bl	8000798 <__errno>
 80006a4:	230c      	movs	r3, #12
 80006a6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd10      	pop	{r4, pc}
 80006b0:	20000074 	.word	0x20000074
 80006b4:	20020000 	.word	0x20020000
 80006b8:	00000400 	.word	0x00000400
 80006bc:	200001c0 	.word	0x200001c0

080006c0 <SystemInit>:


uint32_t DWT_Init(void)
{
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006c0:	4a0e      	ldr	r2, [pc, #56]	@ (80006fc <SystemInit+0x3c>)
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <SystemInit+0x40>)
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80006c4:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 80006c8:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80006cc:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80006d0:	f8d2 10fc 	ldr.w	r1, [r2, #252]	@ 0xfc
 80006d4:	f041 7180 	orr.w	r1, r1, #16777216	@ 0x1000000
 80006d8:	f8c2 10fc 	str.w	r1, [r2, #252]	@ 0xfc
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	f022 0201 	bic.w	r2, r2, #1
 80006e2:	601a      	str	r2, [r3, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006e4:	681a      	ldr	r2, [r3, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80006e6:	2000      	movs	r0, #0
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80006e8:	f042 0201 	orr.w	r2, r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
    DWT->CYCCNT = 0;
 80006ee:	6058      	str	r0, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80006f0:	bf00      	nop
    __ASM volatile ("NOP");
 80006f2:	bf00      	nop
    __ASM volatile ("NOP");
 80006f4:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80006f6:	685b      	ldr	r3, [r3, #4]
}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	e000ed00 	.word	0xe000ed00
 8000700:	e0001000 	.word	0xe0001000

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000708:	f7ff ffda 	bl	80006c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	@ (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	@ (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000732:	f000 f837 	bl	80007a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff ff2f 	bl	8000598 <main>

0800073a <LoopForever>:

LoopForever:
  b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000748:	080010fc 	.word	0x080010fc
  ldr r2, =_sbss
 800074c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000750:	200001c0 	.word	0x200001c0

08000754 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC_IRQHandler>
	...

08000758 <siprintf>:
 8000758:	b40e      	push	{r1, r2, r3}
 800075a:	b500      	push	{lr}
 800075c:	b09c      	sub	sp, #112	@ 0x70
 800075e:	ab1d      	add	r3, sp, #116	@ 0x74
 8000760:	9002      	str	r0, [sp, #8]
 8000762:	9006      	str	r0, [sp, #24]
 8000764:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000768:	4809      	ldr	r0, [pc, #36]	@ (8000790 <siprintf+0x38>)
 800076a:	9107      	str	r1, [sp, #28]
 800076c:	9104      	str	r1, [sp, #16]
 800076e:	4909      	ldr	r1, [pc, #36]	@ (8000794 <siprintf+0x3c>)
 8000770:	f853 2b04 	ldr.w	r2, [r3], #4
 8000774:	9105      	str	r1, [sp, #20]
 8000776:	6800      	ldr	r0, [r0, #0]
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	a902      	add	r1, sp, #8
 800077c:	f000 f98c 	bl	8000a98 <_svfiprintf_r>
 8000780:	9b02      	ldr	r3, [sp, #8]
 8000782:	2200      	movs	r2, #0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	b01c      	add	sp, #112	@ 0x70
 8000788:	f85d eb04 	ldr.w	lr, [sp], #4
 800078c:	b003      	add	sp, #12
 800078e:	4770      	bx	lr
 8000790:	20000004 	.word	0x20000004
 8000794:	ffff0208 	.word	0xffff0208

08000798 <__errno>:
 8000798:	4b01      	ldr	r3, [pc, #4]	@ (80007a0 <__errno+0x8>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000004 	.word	0x20000004

080007a4 <__libc_init_array>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	4d0d      	ldr	r5, [pc, #52]	@ (80007dc <__libc_init_array+0x38>)
 80007a8:	4c0d      	ldr	r4, [pc, #52]	@ (80007e0 <__libc_init_array+0x3c>)
 80007aa:	1b64      	subs	r4, r4, r5
 80007ac:	10a4      	asrs	r4, r4, #2
 80007ae:	2600      	movs	r6, #0
 80007b0:	42a6      	cmp	r6, r4
 80007b2:	d109      	bne.n	80007c8 <__libc_init_array+0x24>
 80007b4:	4d0b      	ldr	r5, [pc, #44]	@ (80007e4 <__libc_init_array+0x40>)
 80007b6:	4c0c      	ldr	r4, [pc, #48]	@ (80007e8 <__libc_init_array+0x44>)
 80007b8:	f000 fc66 	bl	8001088 <_init>
 80007bc:	1b64      	subs	r4, r4, r5
 80007be:	10a4      	asrs	r4, r4, #2
 80007c0:	2600      	movs	r6, #0
 80007c2:	42a6      	cmp	r6, r4
 80007c4:	d105      	bne.n	80007d2 <__libc_init_array+0x2e>
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007cc:	4798      	blx	r3
 80007ce:	3601      	adds	r6, #1
 80007d0:	e7ee      	b.n	80007b0 <__libc_init_array+0xc>
 80007d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d6:	4798      	blx	r3
 80007d8:	3601      	adds	r6, #1
 80007da:	e7f2      	b.n	80007c2 <__libc_init_array+0x1e>
 80007dc:	080010f4 	.word	0x080010f4
 80007e0:	080010f4 	.word	0x080010f4
 80007e4:	080010f4 	.word	0x080010f4
 80007e8:	080010f8 	.word	0x080010f8

080007ec <__retarget_lock_acquire_recursive>:
 80007ec:	4770      	bx	lr

080007ee <__retarget_lock_release_recursive>:
 80007ee:	4770      	bx	lr

080007f0 <_free_r>:
 80007f0:	b538      	push	{r3, r4, r5, lr}
 80007f2:	4605      	mov	r5, r0
 80007f4:	2900      	cmp	r1, #0
 80007f6:	d041      	beq.n	800087c <_free_r+0x8c>
 80007f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007fc:	1f0c      	subs	r4, r1, #4
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bfb8      	it	lt
 8000802:	18e4      	addlt	r4, r4, r3
 8000804:	f000 f8e0 	bl	80009c8 <__malloc_lock>
 8000808:	4a1d      	ldr	r2, [pc, #116]	@ (8000880 <_free_r+0x90>)
 800080a:	6813      	ldr	r3, [r2, #0]
 800080c:	b933      	cbnz	r3, 800081c <_free_r+0x2c>
 800080e:	6063      	str	r3, [r4, #4]
 8000810:	6014      	str	r4, [r2, #0]
 8000812:	4628      	mov	r0, r5
 8000814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000818:	f000 b8dc 	b.w	80009d4 <__malloc_unlock>
 800081c:	42a3      	cmp	r3, r4
 800081e:	d908      	bls.n	8000832 <_free_r+0x42>
 8000820:	6820      	ldr	r0, [r4, #0]
 8000822:	1821      	adds	r1, r4, r0
 8000824:	428b      	cmp	r3, r1
 8000826:	bf01      	itttt	eq
 8000828:	6819      	ldreq	r1, [r3, #0]
 800082a:	685b      	ldreq	r3, [r3, #4]
 800082c:	1809      	addeq	r1, r1, r0
 800082e:	6021      	streq	r1, [r4, #0]
 8000830:	e7ed      	b.n	800080e <_free_r+0x1e>
 8000832:	461a      	mov	r2, r3
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	b10b      	cbz	r3, 800083c <_free_r+0x4c>
 8000838:	42a3      	cmp	r3, r4
 800083a:	d9fa      	bls.n	8000832 <_free_r+0x42>
 800083c:	6811      	ldr	r1, [r2, #0]
 800083e:	1850      	adds	r0, r2, r1
 8000840:	42a0      	cmp	r0, r4
 8000842:	d10b      	bne.n	800085c <_free_r+0x6c>
 8000844:	6820      	ldr	r0, [r4, #0]
 8000846:	4401      	add	r1, r0
 8000848:	1850      	adds	r0, r2, r1
 800084a:	4283      	cmp	r3, r0
 800084c:	6011      	str	r1, [r2, #0]
 800084e:	d1e0      	bne.n	8000812 <_free_r+0x22>
 8000850:	6818      	ldr	r0, [r3, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	6053      	str	r3, [r2, #4]
 8000856:	4408      	add	r0, r1
 8000858:	6010      	str	r0, [r2, #0]
 800085a:	e7da      	b.n	8000812 <_free_r+0x22>
 800085c:	d902      	bls.n	8000864 <_free_r+0x74>
 800085e:	230c      	movs	r3, #12
 8000860:	602b      	str	r3, [r5, #0]
 8000862:	e7d6      	b.n	8000812 <_free_r+0x22>
 8000864:	6820      	ldr	r0, [r4, #0]
 8000866:	1821      	adds	r1, r4, r0
 8000868:	428b      	cmp	r3, r1
 800086a:	bf04      	itt	eq
 800086c:	6819      	ldreq	r1, [r3, #0]
 800086e:	685b      	ldreq	r3, [r3, #4]
 8000870:	6063      	str	r3, [r4, #4]
 8000872:	bf04      	itt	eq
 8000874:	1809      	addeq	r1, r1, r0
 8000876:	6021      	streq	r1, [r4, #0]
 8000878:	6054      	str	r4, [r2, #4]
 800087a:	e7ca      	b.n	8000812 <_free_r+0x22>
 800087c:	bd38      	pop	{r3, r4, r5, pc}
 800087e:	bf00      	nop
 8000880:	200001bc 	.word	0x200001bc

08000884 <sbrk_aligned>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	4e0f      	ldr	r6, [pc, #60]	@ (80008c4 <sbrk_aligned+0x40>)
 8000888:	460c      	mov	r4, r1
 800088a:	6831      	ldr	r1, [r6, #0]
 800088c:	4605      	mov	r5, r0
 800088e:	b911      	cbnz	r1, 8000896 <sbrk_aligned+0x12>
 8000890:	f000 fba6 	bl	8000fe0 <_sbrk_r>
 8000894:	6030      	str	r0, [r6, #0]
 8000896:	4621      	mov	r1, r4
 8000898:	4628      	mov	r0, r5
 800089a:	f000 fba1 	bl	8000fe0 <_sbrk_r>
 800089e:	1c43      	adds	r3, r0, #1
 80008a0:	d103      	bne.n	80008aa <sbrk_aligned+0x26>
 80008a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80008a6:	4620      	mov	r0, r4
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	1cc4      	adds	r4, r0, #3
 80008ac:	f024 0403 	bic.w	r4, r4, #3
 80008b0:	42a0      	cmp	r0, r4
 80008b2:	d0f8      	beq.n	80008a6 <sbrk_aligned+0x22>
 80008b4:	1a21      	subs	r1, r4, r0
 80008b6:	4628      	mov	r0, r5
 80008b8:	f000 fb92 	bl	8000fe0 <_sbrk_r>
 80008bc:	3001      	adds	r0, #1
 80008be:	d1f2      	bne.n	80008a6 <sbrk_aligned+0x22>
 80008c0:	e7ef      	b.n	80008a2 <sbrk_aligned+0x1e>
 80008c2:	bf00      	nop
 80008c4:	200001b8 	.word	0x200001b8

080008c8 <_malloc_r>:
 80008c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008cc:	1ccd      	adds	r5, r1, #3
 80008ce:	f025 0503 	bic.w	r5, r5, #3
 80008d2:	3508      	adds	r5, #8
 80008d4:	2d0c      	cmp	r5, #12
 80008d6:	bf38      	it	cc
 80008d8:	250c      	movcc	r5, #12
 80008da:	2d00      	cmp	r5, #0
 80008dc:	4606      	mov	r6, r0
 80008de:	db01      	blt.n	80008e4 <_malloc_r+0x1c>
 80008e0:	42a9      	cmp	r1, r5
 80008e2:	d904      	bls.n	80008ee <_malloc_r+0x26>
 80008e4:	230c      	movs	r3, #12
 80008e6:	6033      	str	r3, [r6, #0]
 80008e8:	2000      	movs	r0, #0
 80008ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009c4 <_malloc_r+0xfc>
 80008f2:	f000 f869 	bl	80009c8 <__malloc_lock>
 80008f6:	f8d8 3000 	ldr.w	r3, [r8]
 80008fa:	461c      	mov	r4, r3
 80008fc:	bb44      	cbnz	r4, 8000950 <_malloc_r+0x88>
 80008fe:	4629      	mov	r1, r5
 8000900:	4630      	mov	r0, r6
 8000902:	f7ff ffbf 	bl	8000884 <sbrk_aligned>
 8000906:	1c43      	adds	r3, r0, #1
 8000908:	4604      	mov	r4, r0
 800090a:	d158      	bne.n	80009be <_malloc_r+0xf6>
 800090c:	f8d8 4000 	ldr.w	r4, [r8]
 8000910:	4627      	mov	r7, r4
 8000912:	2f00      	cmp	r7, #0
 8000914:	d143      	bne.n	800099e <_malloc_r+0xd6>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d04b      	beq.n	80009b2 <_malloc_r+0xea>
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	4639      	mov	r1, r7
 800091e:	4630      	mov	r0, r6
 8000920:	eb04 0903 	add.w	r9, r4, r3
 8000924:	f000 fb5c 	bl	8000fe0 <_sbrk_r>
 8000928:	4581      	cmp	r9, r0
 800092a:	d142      	bne.n	80009b2 <_malloc_r+0xea>
 800092c:	6821      	ldr	r1, [r4, #0]
 800092e:	1a6d      	subs	r5, r5, r1
 8000930:	4629      	mov	r1, r5
 8000932:	4630      	mov	r0, r6
 8000934:	f7ff ffa6 	bl	8000884 <sbrk_aligned>
 8000938:	3001      	adds	r0, #1
 800093a:	d03a      	beq.n	80009b2 <_malloc_r+0xea>
 800093c:	6823      	ldr	r3, [r4, #0]
 800093e:	442b      	add	r3, r5
 8000940:	6023      	str	r3, [r4, #0]
 8000942:	f8d8 3000 	ldr.w	r3, [r8]
 8000946:	685a      	ldr	r2, [r3, #4]
 8000948:	bb62      	cbnz	r2, 80009a4 <_malloc_r+0xdc>
 800094a:	f8c8 7000 	str.w	r7, [r8]
 800094e:	e00f      	b.n	8000970 <_malloc_r+0xa8>
 8000950:	6822      	ldr	r2, [r4, #0]
 8000952:	1b52      	subs	r2, r2, r5
 8000954:	d420      	bmi.n	8000998 <_malloc_r+0xd0>
 8000956:	2a0b      	cmp	r2, #11
 8000958:	d917      	bls.n	800098a <_malloc_r+0xc2>
 800095a:	1961      	adds	r1, r4, r5
 800095c:	42a3      	cmp	r3, r4
 800095e:	6025      	str	r5, [r4, #0]
 8000960:	bf18      	it	ne
 8000962:	6059      	strne	r1, [r3, #4]
 8000964:	6863      	ldr	r3, [r4, #4]
 8000966:	bf08      	it	eq
 8000968:	f8c8 1000 	streq.w	r1, [r8]
 800096c:	5162      	str	r2, [r4, r5]
 800096e:	604b      	str	r3, [r1, #4]
 8000970:	4630      	mov	r0, r6
 8000972:	f000 f82f 	bl	80009d4 <__malloc_unlock>
 8000976:	f104 000b 	add.w	r0, r4, #11
 800097a:	1d23      	adds	r3, r4, #4
 800097c:	f020 0007 	bic.w	r0, r0, #7
 8000980:	1ac2      	subs	r2, r0, r3
 8000982:	bf1c      	itt	ne
 8000984:	1a1b      	subne	r3, r3, r0
 8000986:	50a3      	strne	r3, [r4, r2]
 8000988:	e7af      	b.n	80008ea <_malloc_r+0x22>
 800098a:	6862      	ldr	r2, [r4, #4]
 800098c:	42a3      	cmp	r3, r4
 800098e:	bf0c      	ite	eq
 8000990:	f8c8 2000 	streq.w	r2, [r8]
 8000994:	605a      	strne	r2, [r3, #4]
 8000996:	e7eb      	b.n	8000970 <_malloc_r+0xa8>
 8000998:	4623      	mov	r3, r4
 800099a:	6864      	ldr	r4, [r4, #4]
 800099c:	e7ae      	b.n	80008fc <_malloc_r+0x34>
 800099e:	463c      	mov	r4, r7
 80009a0:	687f      	ldr	r7, [r7, #4]
 80009a2:	e7b6      	b.n	8000912 <_malloc_r+0x4a>
 80009a4:	461a      	mov	r2, r3
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	42a3      	cmp	r3, r4
 80009aa:	d1fb      	bne.n	80009a4 <_malloc_r+0xdc>
 80009ac:	2300      	movs	r3, #0
 80009ae:	6053      	str	r3, [r2, #4]
 80009b0:	e7de      	b.n	8000970 <_malloc_r+0xa8>
 80009b2:	230c      	movs	r3, #12
 80009b4:	6033      	str	r3, [r6, #0]
 80009b6:	4630      	mov	r0, r6
 80009b8:	f000 f80c 	bl	80009d4 <__malloc_unlock>
 80009bc:	e794      	b.n	80008e8 <_malloc_r+0x20>
 80009be:	6005      	str	r5, [r0, #0]
 80009c0:	e7d6      	b.n	8000970 <_malloc_r+0xa8>
 80009c2:	bf00      	nop
 80009c4:	200001bc 	.word	0x200001bc

080009c8 <__malloc_lock>:
 80009c8:	4801      	ldr	r0, [pc, #4]	@ (80009d0 <__malloc_lock+0x8>)
 80009ca:	f7ff bf0f 	b.w	80007ec <__retarget_lock_acquire_recursive>
 80009ce:	bf00      	nop
 80009d0:	200001b4 	.word	0x200001b4

080009d4 <__malloc_unlock>:
 80009d4:	4801      	ldr	r0, [pc, #4]	@ (80009dc <__malloc_unlock+0x8>)
 80009d6:	f7ff bf0a 	b.w	80007ee <__retarget_lock_release_recursive>
 80009da:	bf00      	nop
 80009dc:	200001b4 	.word	0x200001b4

080009e0 <__ssputs_r>:
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	688e      	ldr	r6, [r1, #8]
 80009e6:	461f      	mov	r7, r3
 80009e8:	42be      	cmp	r6, r7
 80009ea:	680b      	ldr	r3, [r1, #0]
 80009ec:	4682      	mov	sl, r0
 80009ee:	460c      	mov	r4, r1
 80009f0:	4690      	mov	r8, r2
 80009f2:	d82d      	bhi.n	8000a50 <__ssputs_r+0x70>
 80009f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009fc:	d026      	beq.n	8000a4c <__ssputs_r+0x6c>
 80009fe:	6965      	ldr	r5, [r4, #20]
 8000a00:	6909      	ldr	r1, [r1, #16]
 8000a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000a06:	eba3 0901 	sub.w	r9, r3, r1
 8000a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a0e:	1c7b      	adds	r3, r7, #1
 8000a10:	444b      	add	r3, r9
 8000a12:	106d      	asrs	r5, r5, #1
 8000a14:	429d      	cmp	r5, r3
 8000a16:	bf38      	it	cc
 8000a18:	461d      	movcc	r5, r3
 8000a1a:	0553      	lsls	r3, r2, #21
 8000a1c:	d527      	bpl.n	8000a6e <__ssputs_r+0x8e>
 8000a1e:	4629      	mov	r1, r5
 8000a20:	f7ff ff52 	bl	80008c8 <_malloc_r>
 8000a24:	4606      	mov	r6, r0
 8000a26:	b360      	cbz	r0, 8000a82 <__ssputs_r+0xa2>
 8000a28:	6921      	ldr	r1, [r4, #16]
 8000a2a:	464a      	mov	r2, r9
 8000a2c:	f000 fae8 	bl	8001000 <memcpy>
 8000a30:	89a3      	ldrh	r3, [r4, #12]
 8000a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3a:	81a3      	strh	r3, [r4, #12]
 8000a3c:	6126      	str	r6, [r4, #16]
 8000a3e:	6165      	str	r5, [r4, #20]
 8000a40:	444e      	add	r6, r9
 8000a42:	eba5 0509 	sub.w	r5, r5, r9
 8000a46:	6026      	str	r6, [r4, #0]
 8000a48:	60a5      	str	r5, [r4, #8]
 8000a4a:	463e      	mov	r6, r7
 8000a4c:	42be      	cmp	r6, r7
 8000a4e:	d900      	bls.n	8000a52 <__ssputs_r+0x72>
 8000a50:	463e      	mov	r6, r7
 8000a52:	6820      	ldr	r0, [r4, #0]
 8000a54:	4632      	mov	r2, r6
 8000a56:	4641      	mov	r1, r8
 8000a58:	f000 faa8 	bl	8000fac <memmove>
 8000a5c:	68a3      	ldr	r3, [r4, #8]
 8000a5e:	1b9b      	subs	r3, r3, r6
 8000a60:	60a3      	str	r3, [r4, #8]
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	4433      	add	r3, r6
 8000a66:	6023      	str	r3, [r4, #0]
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	462a      	mov	r2, r5
 8000a70:	f000 fad4 	bl	800101c <_realloc_r>
 8000a74:	4606      	mov	r6, r0
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d1e0      	bne.n	8000a3c <__ssputs_r+0x5c>
 8000a7a:	6921      	ldr	r1, [r4, #16]
 8000a7c:	4650      	mov	r0, sl
 8000a7e:	f7ff feb7 	bl	80007f0 <_free_r>
 8000a82:	230c      	movs	r3, #12
 8000a84:	f8ca 3000 	str.w	r3, [sl]
 8000a88:	89a3      	ldrh	r3, [r4, #12]
 8000a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8e:	81a3      	strh	r3, [r4, #12]
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a94:	e7e9      	b.n	8000a6a <__ssputs_r+0x8a>
	...

08000a98 <_svfiprintf_r>:
 8000a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a9c:	4698      	mov	r8, r3
 8000a9e:	898b      	ldrh	r3, [r1, #12]
 8000aa0:	061b      	lsls	r3, r3, #24
 8000aa2:	b09d      	sub	sp, #116	@ 0x74
 8000aa4:	4607      	mov	r7, r0
 8000aa6:	460d      	mov	r5, r1
 8000aa8:	4614      	mov	r4, r2
 8000aaa:	d510      	bpl.n	8000ace <_svfiprintf_r+0x36>
 8000aac:	690b      	ldr	r3, [r1, #16]
 8000aae:	b973      	cbnz	r3, 8000ace <_svfiprintf_r+0x36>
 8000ab0:	2140      	movs	r1, #64	@ 0x40
 8000ab2:	f7ff ff09 	bl	80008c8 <_malloc_r>
 8000ab6:	6028      	str	r0, [r5, #0]
 8000ab8:	6128      	str	r0, [r5, #16]
 8000aba:	b930      	cbnz	r0, 8000aca <_svfiprintf_r+0x32>
 8000abc:	230c      	movs	r3, #12
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	b01d      	add	sp, #116	@ 0x74
 8000ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aca:	2340      	movs	r3, #64	@ 0x40
 8000acc:	616b      	str	r3, [r5, #20]
 8000ace:	2300      	movs	r3, #0
 8000ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ad2:	2320      	movs	r3, #32
 8000ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000adc:	2330      	movs	r3, #48	@ 0x30
 8000ade:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c7c <_svfiprintf_r+0x1e4>
 8000ae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ae6:	f04f 0901 	mov.w	r9, #1
 8000aea:	4623      	mov	r3, r4
 8000aec:	469a      	mov	sl, r3
 8000aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000af2:	b10a      	cbz	r2, 8000af8 <_svfiprintf_r+0x60>
 8000af4:	2a25      	cmp	r2, #37	@ 0x25
 8000af6:	d1f9      	bne.n	8000aec <_svfiprintf_r+0x54>
 8000af8:	ebba 0b04 	subs.w	fp, sl, r4
 8000afc:	d00b      	beq.n	8000b16 <_svfiprintf_r+0x7e>
 8000afe:	465b      	mov	r3, fp
 8000b00:	4622      	mov	r2, r4
 8000b02:	4629      	mov	r1, r5
 8000b04:	4638      	mov	r0, r7
 8000b06:	f7ff ff6b 	bl	80009e0 <__ssputs_r>
 8000b0a:	3001      	adds	r0, #1
 8000b0c:	f000 80a7 	beq.w	8000c5e <_svfiprintf_r+0x1c6>
 8000b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b12:	445a      	add	r2, fp
 8000b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b16:	f89a 3000 	ldrb.w	r3, [sl]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f000 809f 	beq.w	8000c5e <_svfiprintf_r+0x1c6>
 8000b20:	2300      	movs	r3, #0
 8000b22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b2a:	f10a 0a01 	add.w	sl, sl, #1
 8000b2e:	9304      	str	r3, [sp, #16]
 8000b30:	9307      	str	r3, [sp, #28]
 8000b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b38:	4654      	mov	r4, sl
 8000b3a:	2205      	movs	r2, #5
 8000b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b40:	484e      	ldr	r0, [pc, #312]	@ (8000c7c <_svfiprintf_r+0x1e4>)
 8000b42:	f7ff fb45 	bl	80001d0 <memchr>
 8000b46:	9a04      	ldr	r2, [sp, #16]
 8000b48:	b9d8      	cbnz	r0, 8000b82 <_svfiprintf_r+0xea>
 8000b4a:	06d0      	lsls	r0, r2, #27
 8000b4c:	bf44      	itt	mi
 8000b4e:	2320      	movmi	r3, #32
 8000b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b54:	0711      	lsls	r1, r2, #28
 8000b56:	bf44      	itt	mi
 8000b58:	232b      	movmi	r3, #43	@ 0x2b
 8000b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b64:	d015      	beq.n	8000b92 <_svfiprintf_r+0xfa>
 8000b66:	9a07      	ldr	r2, [sp, #28]
 8000b68:	4654      	mov	r4, sl
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f04f 0c0a 	mov.w	ip, #10
 8000b70:	4621      	mov	r1, r4
 8000b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b76:	3b30      	subs	r3, #48	@ 0x30
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	d94b      	bls.n	8000c14 <_svfiprintf_r+0x17c>
 8000b7c:	b1b0      	cbz	r0, 8000bac <_svfiprintf_r+0x114>
 8000b7e:	9207      	str	r2, [sp, #28]
 8000b80:	e014      	b.n	8000bac <_svfiprintf_r+0x114>
 8000b82:	eba0 0308 	sub.w	r3, r0, r8
 8000b86:	fa09 f303 	lsl.w	r3, r9, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	9304      	str	r3, [sp, #16]
 8000b8e:	46a2      	mov	sl, r4
 8000b90:	e7d2      	b.n	8000b38 <_svfiprintf_r+0xa0>
 8000b92:	9b03      	ldr	r3, [sp, #12]
 8000b94:	1d19      	adds	r1, r3, #4
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	9103      	str	r1, [sp, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bfbb      	ittet	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8000ba4:	9307      	strge	r3, [sp, #28]
 8000ba6:	9307      	strlt	r3, [sp, #28]
 8000ba8:	bfb8      	it	lt
 8000baa:	9204      	strlt	r2, [sp, #16]
 8000bac:	7823      	ldrb	r3, [r4, #0]
 8000bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8000bb0:	d10a      	bne.n	8000bc8 <_svfiprintf_r+0x130>
 8000bb2:	7863      	ldrb	r3, [r4, #1]
 8000bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000bb6:	d132      	bne.n	8000c1e <_svfiprintf_r+0x186>
 8000bb8:	9b03      	ldr	r3, [sp, #12]
 8000bba:	1d1a      	adds	r2, r3, #4
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	9203      	str	r2, [sp, #12]
 8000bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bc4:	3402      	adds	r4, #2
 8000bc6:	9305      	str	r3, [sp, #20]
 8000bc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8000c80 <_svfiprintf_r+0x1e8>
 8000bcc:	7821      	ldrb	r1, [r4, #0]
 8000bce:	2203      	movs	r2, #3
 8000bd0:	4650      	mov	r0, sl
 8000bd2:	f7ff fafd 	bl	80001d0 <memchr>
 8000bd6:	b138      	cbz	r0, 8000be8 <_svfiprintf_r+0x150>
 8000bd8:	9b04      	ldr	r3, [sp, #16]
 8000bda:	eba0 000a 	sub.w	r0, r0, sl
 8000bde:	2240      	movs	r2, #64	@ 0x40
 8000be0:	4082      	lsls	r2, r0
 8000be2:	4313      	orrs	r3, r2
 8000be4:	3401      	adds	r4, #1
 8000be6:	9304      	str	r3, [sp, #16]
 8000be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bec:	4825      	ldr	r0, [pc, #148]	@ (8000c84 <_svfiprintf_r+0x1ec>)
 8000bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bf2:	2206      	movs	r2, #6
 8000bf4:	f7ff faec 	bl	80001d0 <memchr>
 8000bf8:	2800      	cmp	r0, #0
 8000bfa:	d036      	beq.n	8000c6a <_svfiprintf_r+0x1d2>
 8000bfc:	4b22      	ldr	r3, [pc, #136]	@ (8000c88 <_svfiprintf_r+0x1f0>)
 8000bfe:	bb1b      	cbnz	r3, 8000c48 <_svfiprintf_r+0x1b0>
 8000c00:	9b03      	ldr	r3, [sp, #12]
 8000c02:	3307      	adds	r3, #7
 8000c04:	f023 0307 	bic.w	r3, r3, #7
 8000c08:	3308      	adds	r3, #8
 8000c0a:	9303      	str	r3, [sp, #12]
 8000c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c0e:	4433      	add	r3, r6
 8000c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c12:	e76a      	b.n	8000aea <_svfiprintf_r+0x52>
 8000c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c18:	460c      	mov	r4, r1
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e7a8      	b.n	8000b70 <_svfiprintf_r+0xd8>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	3401      	adds	r4, #1
 8000c22:	9305      	str	r3, [sp, #20]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f04f 0c0a 	mov.w	ip, #10
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c30:	3a30      	subs	r2, #48	@ 0x30
 8000c32:	2a09      	cmp	r2, #9
 8000c34:	d903      	bls.n	8000c3e <_svfiprintf_r+0x1a6>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0c6      	beq.n	8000bc8 <_svfiprintf_r+0x130>
 8000c3a:	9105      	str	r1, [sp, #20]
 8000c3c:	e7c4      	b.n	8000bc8 <_svfiprintf_r+0x130>
 8000c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c42:	4604      	mov	r4, r0
 8000c44:	2301      	movs	r3, #1
 8000c46:	e7f0      	b.n	8000c2a <_svfiprintf_r+0x192>
 8000c48:	ab03      	add	r3, sp, #12
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	462a      	mov	r2, r5
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <_svfiprintf_r+0x1f4>)
 8000c50:	a904      	add	r1, sp, #16
 8000c52:	4638      	mov	r0, r7
 8000c54:	f3af 8000 	nop.w
 8000c58:	1c42      	adds	r2, r0, #1
 8000c5a:	4606      	mov	r6, r0
 8000c5c:	d1d6      	bne.n	8000c0c <_svfiprintf_r+0x174>
 8000c5e:	89ab      	ldrh	r3, [r5, #12]
 8000c60:	065b      	lsls	r3, r3, #25
 8000c62:	f53f af2d 	bmi.w	8000ac0 <_svfiprintf_r+0x28>
 8000c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c68:	e72c      	b.n	8000ac4 <_svfiprintf_r+0x2c>
 8000c6a:	ab03      	add	r3, sp, #12
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	462a      	mov	r2, r5
 8000c70:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <_svfiprintf_r+0x1f4>)
 8000c72:	a904      	add	r1, sp, #16
 8000c74:	4638      	mov	r0, r7
 8000c76:	f000 f879 	bl	8000d6c <_printf_i>
 8000c7a:	e7ed      	b.n	8000c58 <_svfiprintf_r+0x1c0>
 8000c7c:	080010b6 	.word	0x080010b6
 8000c80:	080010bc 	.word	0x080010bc
 8000c84:	080010c0 	.word	0x080010c0
 8000c88:	00000000 	.word	0x00000000
 8000c8c:	080009e1 	.word	0x080009e1

08000c90 <_printf_common>:
 8000c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c94:	4616      	mov	r6, r2
 8000c96:	4698      	mov	r8, r3
 8000c98:	688a      	ldr	r2, [r1, #8]
 8000c9a:	690b      	ldr	r3, [r1, #16]
 8000c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	bfb8      	it	lt
 8000ca4:	4613      	movlt	r3, r2
 8000ca6:	6033      	str	r3, [r6, #0]
 8000ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cac:	4607      	mov	r7, r0
 8000cae:	460c      	mov	r4, r1
 8000cb0:	b10a      	cbz	r2, 8000cb6 <_printf_common+0x26>
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	6033      	str	r3, [r6, #0]
 8000cb6:	6823      	ldr	r3, [r4, #0]
 8000cb8:	0699      	lsls	r1, r3, #26
 8000cba:	bf42      	ittt	mi
 8000cbc:	6833      	ldrmi	r3, [r6, #0]
 8000cbe:	3302      	addmi	r3, #2
 8000cc0:	6033      	strmi	r3, [r6, #0]
 8000cc2:	6825      	ldr	r5, [r4, #0]
 8000cc4:	f015 0506 	ands.w	r5, r5, #6
 8000cc8:	d106      	bne.n	8000cd8 <_printf_common+0x48>
 8000cca:	f104 0a19 	add.w	sl, r4, #25
 8000cce:	68e3      	ldr	r3, [r4, #12]
 8000cd0:	6832      	ldr	r2, [r6, #0]
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	42ab      	cmp	r3, r5
 8000cd6:	dc26      	bgt.n	8000d26 <_printf_common+0x96>
 8000cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cdc:	6822      	ldr	r2, [r4, #0]
 8000cde:	3b00      	subs	r3, #0
 8000ce0:	bf18      	it	ne
 8000ce2:	2301      	movne	r3, #1
 8000ce4:	0692      	lsls	r2, r2, #26
 8000ce6:	d42b      	bmi.n	8000d40 <_printf_common+0xb0>
 8000ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cec:	4641      	mov	r1, r8
 8000cee:	4638      	mov	r0, r7
 8000cf0:	47c8      	blx	r9
 8000cf2:	3001      	adds	r0, #1
 8000cf4:	d01e      	beq.n	8000d34 <_printf_common+0xa4>
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	6922      	ldr	r2, [r4, #16]
 8000cfa:	f003 0306 	and.w	r3, r3, #6
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf02      	ittt	eq
 8000d02:	68e5      	ldreq	r5, [r4, #12]
 8000d04:	6833      	ldreq	r3, [r6, #0]
 8000d06:	1aed      	subeq	r5, r5, r3
 8000d08:	68a3      	ldr	r3, [r4, #8]
 8000d0a:	bf0c      	ite	eq
 8000d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d10:	2500      	movne	r5, #0
 8000d12:	4293      	cmp	r3, r2
 8000d14:	bfc4      	itt	gt
 8000d16:	1a9b      	subgt	r3, r3, r2
 8000d18:	18ed      	addgt	r5, r5, r3
 8000d1a:	2600      	movs	r6, #0
 8000d1c:	341a      	adds	r4, #26
 8000d1e:	42b5      	cmp	r5, r6
 8000d20:	d11a      	bne.n	8000d58 <_printf_common+0xc8>
 8000d22:	2000      	movs	r0, #0
 8000d24:	e008      	b.n	8000d38 <_printf_common+0xa8>
 8000d26:	2301      	movs	r3, #1
 8000d28:	4652      	mov	r2, sl
 8000d2a:	4641      	mov	r1, r8
 8000d2c:	4638      	mov	r0, r7
 8000d2e:	47c8      	blx	r9
 8000d30:	3001      	adds	r0, #1
 8000d32:	d103      	bne.n	8000d3c <_printf_common+0xac>
 8000d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	3501      	adds	r5, #1
 8000d3e:	e7c6      	b.n	8000cce <_printf_common+0x3e>
 8000d40:	18e1      	adds	r1, r4, r3
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	2030      	movs	r0, #48	@ 0x30
 8000d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d4a:	4422      	add	r2, r4
 8000d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d54:	3302      	adds	r3, #2
 8000d56:	e7c7      	b.n	8000ce8 <_printf_common+0x58>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	4622      	mov	r2, r4
 8000d5c:	4641      	mov	r1, r8
 8000d5e:	4638      	mov	r0, r7
 8000d60:	47c8      	blx	r9
 8000d62:	3001      	adds	r0, #1
 8000d64:	d0e6      	beq.n	8000d34 <_printf_common+0xa4>
 8000d66:	3601      	adds	r6, #1
 8000d68:	e7d9      	b.n	8000d1e <_printf_common+0x8e>
	...

08000d6c <_printf_i>:
 8000d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	7e0f      	ldrb	r7, [r1, #24]
 8000d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d74:	2f78      	cmp	r7, #120	@ 0x78
 8000d76:	4691      	mov	r9, r2
 8000d78:	4680      	mov	r8, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	469a      	mov	sl, r3
 8000d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d82:	d807      	bhi.n	8000d94 <_printf_i+0x28>
 8000d84:	2f62      	cmp	r7, #98	@ 0x62
 8000d86:	d80a      	bhi.n	8000d9e <_printf_i+0x32>
 8000d88:	2f00      	cmp	r7, #0
 8000d8a:	f000 80d2 	beq.w	8000f32 <_printf_i+0x1c6>
 8000d8e:	2f58      	cmp	r7, #88	@ 0x58
 8000d90:	f000 80b9 	beq.w	8000f06 <_printf_i+0x19a>
 8000d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d9c:	e03a      	b.n	8000e14 <_printf_i+0xa8>
 8000d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000da2:	2b15      	cmp	r3, #21
 8000da4:	d8f6      	bhi.n	8000d94 <_printf_i+0x28>
 8000da6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dac <_printf_i+0x40>)
 8000da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dac:	08000e05 	.word	0x08000e05
 8000db0:	08000e19 	.word	0x08000e19
 8000db4:	08000d95 	.word	0x08000d95
 8000db8:	08000d95 	.word	0x08000d95
 8000dbc:	08000d95 	.word	0x08000d95
 8000dc0:	08000d95 	.word	0x08000d95
 8000dc4:	08000e19 	.word	0x08000e19
 8000dc8:	08000d95 	.word	0x08000d95
 8000dcc:	08000d95 	.word	0x08000d95
 8000dd0:	08000d95 	.word	0x08000d95
 8000dd4:	08000d95 	.word	0x08000d95
 8000dd8:	08000f19 	.word	0x08000f19
 8000ddc:	08000e43 	.word	0x08000e43
 8000de0:	08000ed3 	.word	0x08000ed3
 8000de4:	08000d95 	.word	0x08000d95
 8000de8:	08000d95 	.word	0x08000d95
 8000dec:	08000f3b 	.word	0x08000f3b
 8000df0:	08000d95 	.word	0x08000d95
 8000df4:	08000e43 	.word	0x08000e43
 8000df8:	08000d95 	.word	0x08000d95
 8000dfc:	08000d95 	.word	0x08000d95
 8000e00:	08000edb 	.word	0x08000edb
 8000e04:	6833      	ldr	r3, [r6, #0]
 8000e06:	1d1a      	adds	r2, r3, #4
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	6032      	str	r2, [r6, #0]
 8000e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e14:	2301      	movs	r3, #1
 8000e16:	e09d      	b.n	8000f54 <_printf_i+0x1e8>
 8000e18:	6833      	ldr	r3, [r6, #0]
 8000e1a:	6820      	ldr	r0, [r4, #0]
 8000e1c:	1d19      	adds	r1, r3, #4
 8000e1e:	6031      	str	r1, [r6, #0]
 8000e20:	0606      	lsls	r6, r0, #24
 8000e22:	d501      	bpl.n	8000e28 <_printf_i+0xbc>
 8000e24:	681d      	ldr	r5, [r3, #0]
 8000e26:	e003      	b.n	8000e30 <_printf_i+0xc4>
 8000e28:	0645      	lsls	r5, r0, #25
 8000e2a:	d5fb      	bpl.n	8000e24 <_printf_i+0xb8>
 8000e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e30:	2d00      	cmp	r5, #0
 8000e32:	da03      	bge.n	8000e3c <_printf_i+0xd0>
 8000e34:	232d      	movs	r3, #45	@ 0x2d
 8000e36:	426d      	negs	r5, r5
 8000e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e3c:	4859      	ldr	r0, [pc, #356]	@ (8000fa4 <_printf_i+0x238>)
 8000e3e:	230a      	movs	r3, #10
 8000e40:	e011      	b.n	8000e66 <_printf_i+0xfa>
 8000e42:	6821      	ldr	r1, [r4, #0]
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	0608      	lsls	r0, r1, #24
 8000e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e4c:	d402      	bmi.n	8000e54 <_printf_i+0xe8>
 8000e4e:	0649      	lsls	r1, r1, #25
 8000e50:	bf48      	it	mi
 8000e52:	b2ad      	uxthmi	r5, r5
 8000e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e56:	4853      	ldr	r0, [pc, #332]	@ (8000fa4 <_printf_i+0x238>)
 8000e58:	6033      	str	r3, [r6, #0]
 8000e5a:	bf14      	ite	ne
 8000e5c:	230a      	movne	r3, #10
 8000e5e:	2308      	moveq	r3, #8
 8000e60:	2100      	movs	r1, #0
 8000e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e66:	6866      	ldr	r6, [r4, #4]
 8000e68:	60a6      	str	r6, [r4, #8]
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	bfa2      	ittt	ge
 8000e6e:	6821      	ldrge	r1, [r4, #0]
 8000e70:	f021 0104 	bicge.w	r1, r1, #4
 8000e74:	6021      	strge	r1, [r4, #0]
 8000e76:	b90d      	cbnz	r5, 8000e7c <_printf_i+0x110>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d04b      	beq.n	8000f14 <_printf_i+0x1a8>
 8000e7c:	4616      	mov	r6, r2
 8000e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e82:	fb03 5711 	mls	r7, r3, r1, r5
 8000e86:	5dc7      	ldrb	r7, [r0, r7]
 8000e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e8c:	462f      	mov	r7, r5
 8000e8e:	42bb      	cmp	r3, r7
 8000e90:	460d      	mov	r5, r1
 8000e92:	d9f4      	bls.n	8000e7e <_printf_i+0x112>
 8000e94:	2b08      	cmp	r3, #8
 8000e96:	d10b      	bne.n	8000eb0 <_printf_i+0x144>
 8000e98:	6823      	ldr	r3, [r4, #0]
 8000e9a:	07df      	lsls	r7, r3, #31
 8000e9c:	d508      	bpl.n	8000eb0 <_printf_i+0x144>
 8000e9e:	6923      	ldr	r3, [r4, #16]
 8000ea0:	6861      	ldr	r1, [r4, #4]
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	bfde      	ittt	le
 8000ea6:	2330      	movle	r3, #48	@ 0x30
 8000ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000eb0:	1b92      	subs	r2, r2, r6
 8000eb2:	6122      	str	r2, [r4, #16]
 8000eb4:	f8cd a000 	str.w	sl, [sp]
 8000eb8:	464b      	mov	r3, r9
 8000eba:	aa03      	add	r2, sp, #12
 8000ebc:	4621      	mov	r1, r4
 8000ebe:	4640      	mov	r0, r8
 8000ec0:	f7ff fee6 	bl	8000c90 <_printf_common>
 8000ec4:	3001      	adds	r0, #1
 8000ec6:	d14a      	bne.n	8000f5e <_printf_i+0x1f2>
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ecc:	b004      	add	sp, #16
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	f043 0320 	orr.w	r3, r3, #32
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	4833      	ldr	r0, [pc, #204]	@ (8000fa8 <_printf_i+0x23c>)
 8000edc:	2778      	movs	r7, #120	@ 0x78
 8000ede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	6831      	ldr	r1, [r6, #0]
 8000ee6:	061f      	lsls	r7, r3, #24
 8000ee8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000eec:	d402      	bmi.n	8000ef4 <_printf_i+0x188>
 8000eee:	065f      	lsls	r7, r3, #25
 8000ef0:	bf48      	it	mi
 8000ef2:	b2ad      	uxthmi	r5, r5
 8000ef4:	6031      	str	r1, [r6, #0]
 8000ef6:	07d9      	lsls	r1, r3, #31
 8000ef8:	bf44      	itt	mi
 8000efa:	f043 0320 	orrmi.w	r3, r3, #32
 8000efe:	6023      	strmi	r3, [r4, #0]
 8000f00:	b11d      	cbz	r5, 8000f0a <_printf_i+0x19e>
 8000f02:	2310      	movs	r3, #16
 8000f04:	e7ac      	b.n	8000e60 <_printf_i+0xf4>
 8000f06:	4827      	ldr	r0, [pc, #156]	@ (8000fa4 <_printf_i+0x238>)
 8000f08:	e7e9      	b.n	8000ede <_printf_i+0x172>
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	f023 0320 	bic.w	r3, r3, #32
 8000f10:	6023      	str	r3, [r4, #0]
 8000f12:	e7f6      	b.n	8000f02 <_printf_i+0x196>
 8000f14:	4616      	mov	r6, r2
 8000f16:	e7bd      	b.n	8000e94 <_printf_i+0x128>
 8000f18:	6833      	ldr	r3, [r6, #0]
 8000f1a:	6825      	ldr	r5, [r4, #0]
 8000f1c:	6961      	ldr	r1, [r4, #20]
 8000f1e:	1d18      	adds	r0, r3, #4
 8000f20:	6030      	str	r0, [r6, #0]
 8000f22:	062e      	lsls	r6, r5, #24
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	d501      	bpl.n	8000f2c <_printf_i+0x1c0>
 8000f28:	6019      	str	r1, [r3, #0]
 8000f2a:	e002      	b.n	8000f32 <_printf_i+0x1c6>
 8000f2c:	0668      	lsls	r0, r5, #25
 8000f2e:	d5fb      	bpl.n	8000f28 <_printf_i+0x1bc>
 8000f30:	8019      	strh	r1, [r3, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	6123      	str	r3, [r4, #16]
 8000f36:	4616      	mov	r6, r2
 8000f38:	e7bc      	b.n	8000eb4 <_printf_i+0x148>
 8000f3a:	6833      	ldr	r3, [r6, #0]
 8000f3c:	1d1a      	adds	r2, r3, #4
 8000f3e:	6032      	str	r2, [r6, #0]
 8000f40:	681e      	ldr	r6, [r3, #0]
 8000f42:	6862      	ldr	r2, [r4, #4]
 8000f44:	2100      	movs	r1, #0
 8000f46:	4630      	mov	r0, r6
 8000f48:	f7ff f942 	bl	80001d0 <memchr>
 8000f4c:	b108      	cbz	r0, 8000f52 <_printf_i+0x1e6>
 8000f4e:	1b80      	subs	r0, r0, r6
 8000f50:	6060      	str	r0, [r4, #4]
 8000f52:	6863      	ldr	r3, [r4, #4]
 8000f54:	6123      	str	r3, [r4, #16]
 8000f56:	2300      	movs	r3, #0
 8000f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f5c:	e7aa      	b.n	8000eb4 <_printf_i+0x148>
 8000f5e:	6923      	ldr	r3, [r4, #16]
 8000f60:	4632      	mov	r2, r6
 8000f62:	4649      	mov	r1, r9
 8000f64:	4640      	mov	r0, r8
 8000f66:	47d0      	blx	sl
 8000f68:	3001      	adds	r0, #1
 8000f6a:	d0ad      	beq.n	8000ec8 <_printf_i+0x15c>
 8000f6c:	6823      	ldr	r3, [r4, #0]
 8000f6e:	079b      	lsls	r3, r3, #30
 8000f70:	d413      	bmi.n	8000f9a <_printf_i+0x22e>
 8000f72:	68e0      	ldr	r0, [r4, #12]
 8000f74:	9b03      	ldr	r3, [sp, #12]
 8000f76:	4298      	cmp	r0, r3
 8000f78:	bfb8      	it	lt
 8000f7a:	4618      	movlt	r0, r3
 8000f7c:	e7a6      	b.n	8000ecc <_printf_i+0x160>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	4632      	mov	r2, r6
 8000f82:	4649      	mov	r1, r9
 8000f84:	4640      	mov	r0, r8
 8000f86:	47d0      	blx	sl
 8000f88:	3001      	adds	r0, #1
 8000f8a:	d09d      	beq.n	8000ec8 <_printf_i+0x15c>
 8000f8c:	3501      	adds	r5, #1
 8000f8e:	68e3      	ldr	r3, [r4, #12]
 8000f90:	9903      	ldr	r1, [sp, #12]
 8000f92:	1a5b      	subs	r3, r3, r1
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	dcf2      	bgt.n	8000f7e <_printf_i+0x212>
 8000f98:	e7eb      	b.n	8000f72 <_printf_i+0x206>
 8000f9a:	2500      	movs	r5, #0
 8000f9c:	f104 0619 	add.w	r6, r4, #25
 8000fa0:	e7f5      	b.n	8000f8e <_printf_i+0x222>
 8000fa2:	bf00      	nop
 8000fa4:	080010c7 	.word	0x080010c7
 8000fa8:	080010d8 	.word	0x080010d8

08000fac <memmove>:
 8000fac:	4288      	cmp	r0, r1
 8000fae:	b510      	push	{r4, lr}
 8000fb0:	eb01 0402 	add.w	r4, r1, r2
 8000fb4:	d902      	bls.n	8000fbc <memmove+0x10>
 8000fb6:	4284      	cmp	r4, r0
 8000fb8:	4623      	mov	r3, r4
 8000fba:	d807      	bhi.n	8000fcc <memmove+0x20>
 8000fbc:	1e43      	subs	r3, r0, #1
 8000fbe:	42a1      	cmp	r1, r4
 8000fc0:	d008      	beq.n	8000fd4 <memmove+0x28>
 8000fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fca:	e7f8      	b.n	8000fbe <memmove+0x12>
 8000fcc:	4402      	add	r2, r0
 8000fce:	4601      	mov	r1, r0
 8000fd0:	428a      	cmp	r2, r1
 8000fd2:	d100      	bne.n	8000fd6 <memmove+0x2a>
 8000fd4:	bd10      	pop	{r4, pc}
 8000fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fde:	e7f7      	b.n	8000fd0 <memmove+0x24>

08000fe0 <_sbrk_r>:
 8000fe0:	b538      	push	{r3, r4, r5, lr}
 8000fe2:	4d06      	ldr	r5, [pc, #24]	@ (8000ffc <_sbrk_r+0x1c>)
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	4604      	mov	r4, r0
 8000fe8:	4608      	mov	r0, r1
 8000fea:	602b      	str	r3, [r5, #0]
 8000fec:	f7ff fb46 	bl	800067c <_sbrk>
 8000ff0:	1c43      	adds	r3, r0, #1
 8000ff2:	d102      	bne.n	8000ffa <_sbrk_r+0x1a>
 8000ff4:	682b      	ldr	r3, [r5, #0]
 8000ff6:	b103      	cbz	r3, 8000ffa <_sbrk_r+0x1a>
 8000ff8:	6023      	str	r3, [r4, #0]
 8000ffa:	bd38      	pop	{r3, r4, r5, pc}
 8000ffc:	200001b0 	.word	0x200001b0

08001000 <memcpy>:
 8001000:	440a      	add	r2, r1
 8001002:	4291      	cmp	r1, r2
 8001004:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8001008:	d100      	bne.n	800100c <memcpy+0xc>
 800100a:	4770      	bx	lr
 800100c:	b510      	push	{r4, lr}
 800100e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001012:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001016:	4291      	cmp	r1, r2
 8001018:	d1f9      	bne.n	800100e <memcpy+0xe>
 800101a:	bd10      	pop	{r4, pc}

0800101c <_realloc_r>:
 800101c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	4680      	mov	r8, r0
 8001022:	4615      	mov	r5, r2
 8001024:	460c      	mov	r4, r1
 8001026:	b921      	cbnz	r1, 8001032 <_realloc_r+0x16>
 8001028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800102c:	4611      	mov	r1, r2
 800102e:	f7ff bc4b 	b.w	80008c8 <_malloc_r>
 8001032:	b92a      	cbnz	r2, 8001040 <_realloc_r+0x24>
 8001034:	f7ff fbdc 	bl	80007f0 <_free_r>
 8001038:	2400      	movs	r4, #0
 800103a:	4620      	mov	r0, r4
 800103c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001040:	f000 f81a 	bl	8001078 <_malloc_usable_size_r>
 8001044:	4285      	cmp	r5, r0
 8001046:	4606      	mov	r6, r0
 8001048:	d802      	bhi.n	8001050 <_realloc_r+0x34>
 800104a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800104e:	d8f4      	bhi.n	800103a <_realloc_r+0x1e>
 8001050:	4629      	mov	r1, r5
 8001052:	4640      	mov	r0, r8
 8001054:	f7ff fc38 	bl	80008c8 <_malloc_r>
 8001058:	4607      	mov	r7, r0
 800105a:	2800      	cmp	r0, #0
 800105c:	d0ec      	beq.n	8001038 <_realloc_r+0x1c>
 800105e:	42b5      	cmp	r5, r6
 8001060:	462a      	mov	r2, r5
 8001062:	4621      	mov	r1, r4
 8001064:	bf28      	it	cs
 8001066:	4632      	movcs	r2, r6
 8001068:	f7ff ffca 	bl	8001000 <memcpy>
 800106c:	4621      	mov	r1, r4
 800106e:	4640      	mov	r0, r8
 8001070:	f7ff fbbe 	bl	80007f0 <_free_r>
 8001074:	463c      	mov	r4, r7
 8001076:	e7e0      	b.n	800103a <_realloc_r+0x1e>

08001078 <_malloc_usable_size_r>:
 8001078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800107c:	1f18      	subs	r0, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	bfbc      	itt	lt
 8001082:	580b      	ldrlt	r3, [r1, r0]
 8001084:	18c0      	addlt	r0, r0, r3
 8001086:	4770      	bx	lr

08001088 <_init>:
 8001088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108a:	bf00      	nop
 800108c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800108e:	bc08      	pop	{r3}
 8001090:	469e      	mov	lr, r3
 8001092:	4770      	bx	lr

08001094 <_fini>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr
